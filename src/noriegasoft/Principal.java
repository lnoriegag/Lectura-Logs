/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package noriegasoft;

import java.awt.Color;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;

/**
 *
 * @author lnoriegag
 */
public class Principal extends javax.swing.JFrame {

    public String path;
    TreeMap<String, ArrayList<Coordenadas>> tMap = new TreeMap<String, ArrayList<Coordenadas>>();
    static Highlighter.HighlightPainter hlter = new HighLighterText(Color.YELLOW);
    int totalLines = 0;

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbLoadFile = new javax.swing.JButton();
        jlPath = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtfTextoToFind = new javax.swing.JTextField();
        jbSearch = new javax.swing.JButton();
        jrbHighLigthText = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaText = new javax.swing.JTextArea();
        jlStatus = new javax.swing.JLabel();
        jbDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbLoadFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/noriegasoft/resources/file (2).png"))); // NOI18N
        jbLoadFile.setBorderPainted(false);
        jbLoadFile.setContentAreaFilled(false);
        jbLoadFile.setDefaultCapable(false);
        jbLoadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLoadFileActionPerformed(evt);
            }
        });

        jlPath.setFont(new java.awt.Font("Monaco", 2, 9)); // NOI18N
        jlPath.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPath.setText("Cargar el archivo...");

        jLabel1.setFont(new java.awt.Font("Monaco", 1, 10)); // NOI18N
        jLabel1.setText("Ubicaci√≥n:");

        jLabel2.setFont(new java.awt.Font("Monaco", 1, 10)); // NOI18N
        jLabel2.setText("Texto a buscar:");

        jtfTextoToFind.setFont(new java.awt.Font("Monaco", 0, 11)); // NOI18N
        jtfTextoToFind.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfTextoToFindKeyTyped(evt);
            }
        });

        jbSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/noriegasoft/resources/search.png"))); // NOI18N
        jbSearch.setBorderPainted(false);
        jbSearch.setContentAreaFilled(false);
        jbSearch.setDefaultCapable(false);
        jbSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSearchActionPerformed(evt);
            }
        });

        jrbHighLigthText.setFont(new java.awt.Font("Monaco", 1, 11)); // NOI18N
        jrbHighLigthText.setText("Resaltar texto");
        jrbHighLigthText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbHighLigthTextActionPerformed(evt);
            }
        });

        jtaText.setColumns(20);
        jtaText.setFont(new java.awt.Font("Monaco", 0, 11)); // NOI18N
        jtaText.setRows(5);
        jScrollPane1.setViewportView(jtaText);

        jlStatus.setFont(new java.awt.Font("Monaco", 1, 10)); // NOI18N

        jbDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/noriegasoft/resources/error.png"))); // NOI18N
        jbDelete.setBorderPainted(false);
        jbDelete.setContentAreaFilled(false);
        jbDelete.setDefaultCapable(false);
        jbDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfTextoToFind, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jrbHighLigthText)
                        .addGap(0, 41, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jlPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(73, 73, 73)
                                .addComponent(jbLoadFile))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jlStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbDelete)))
                        .addGap(17, 17, 17))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbLoadFile)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jtfTextoToFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jlPath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jrbHighLigthText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbDelete)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbLoadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLoadFileActionPerformed
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", "txt", "log");
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(filter);
        jlStatus.setText("Buscando archivo...");
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        path = f.getAbsolutePath();
        jlPath.setText(path);

        new BackgroundWorker().execute();
    }//GEN-LAST:event_jbLoadFileActionPerformed

    private void jbSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSearchActionPerformed
        if (jtfTextoToFind.getText().equals("") || jtfTextoToFind.getText().equals(" ")) {
            jlStatus.setText("¬°ERROR!, No se ha ingresado texto a buscar. Intente nuevamente");
        } else {
            new BackgroundWorker2().execute();
        }

    }//GEN-LAST:event_jbSearchActionPerformed

    private void jrbHighLigthTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbHighLigthTextActionPerformed
        if (jrbHighLigthText.isSelected()) {
            highLightText(jtaText, jtfTextoToFind.getText());
        } else {
            removeHighLightText(jtaText);
        }
    }//GEN-LAST:event_jrbHighLigthTextActionPerformed

    private void jbDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteActionPerformed
        init();
        jtaText.setText("");
        jlPath.setText("");
        jtfTextoToFind.setText("");
        jrbHighLigthText.setSelected(false);
    }//GEN-LAST:event_jbDeleteActionPerformed

    private void jtfTextoToFindKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfTextoToFindKeyTyped
        Pattern pattern = Pattern.compile("[^A-Za-z0-9]");

        char c = evt.getKeyChar();
        Matcher matcher = pattern.matcher(Character.toString(c));

        if (matcher.matches()) {
            Toolkit.getDefaultToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_jtfTextoToFindKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbDelete;
    private javax.swing.JButton jbLoadFile;
    private javax.swing.JButton jbSearch;
    private javax.swing.JLabel jlPath;
    private static javax.swing.JLabel jlStatus;
    private static javax.swing.JRadioButton jrbHighLigthText;
    public static javax.swing.JTextArea jtaText;
    private static javax.swing.JTextField jtfTextoToFind;
    // End of variables declaration//GEN-END:variables

    public static HashMap getPositionWords(String line) {
        HashMap hm = new HashMap();
        StringTokenizer st = new StringTokenizer(line);
        int total = st.countTokens();
        while (st.hasMoreElements()) {
            ArrayList aux = new ArrayList();
            int position;
            String word = st.nextElement().toString();
            if (hm.containsKey(word)) {
                aux = (ArrayList) hm.get(word);
            }
            position = total - st.countTokens();
            aux.add(position);
            hm.put(word, aux);
            aux = null;
        }
        return hm;
    }

    public static TreeMap createStructure(int numLine, String line, HashMap positionsLine, TreeMap tMap) {
        ArrayList<Coordenadas> positions;
        ArrayList aux;
        ArrayList exist;
        Coordenadas coords;
        // Get a set of the entries
        Set set = positionsLine.entrySet();
        // Get an iterator
        Iterator i = set.iterator();
        // Display elements
        while (i.hasNext()) {
            positions = new ArrayList<Coordenadas>();
            Map.Entry me = (Map.Entry) i.next();
            String text = me.getKey().toString();

            //Returns arraylist of the 'positionsLine' hashmap
            aux = (ArrayList) me.getValue();

            if (tMap.containsKey(text)) {
                exist = (ArrayList) tMap.get(text);
                for (Object object : aux) {
                    coords = new Coordenadas();
                    coords.x = numLine;
                    coords.y = (int) object;
                    //coords.y = Integer.parseInt(object.toString());
                    exist.add(coords);
                    coords = null;
                }
                tMap.put(text, exist);
            } else {
                for (Object object : aux) {
                    coords = new Coordenadas();
                    coords.x = numLine;
                    coords.y = (int) object;
                    //coords.y = Integer.parseInt(object.toString());
                    positions.add(coords);
                    coords = null;
                }
                tMap.put(text, positions);
            }

            positions = null;
            exist = null;
        }

        return tMap;
    }

    public static void reconstructWord(String textToFind, TreeMap tMap) {
        // Return the arrayList that contain the coordinates of a specific word
        TreeMap<String, ArrayList<Coordenadas>> tMap2 = new TreeMap<String, ArrayList<Coordenadas>>();
        TreeMap<Integer, String> tMapLine = null;
        ArrayList aux = (ArrayList) tMap.get(textToFind);
        ArrayList<Integer> numLine = new ArrayList<Integer>();
        ArrayList<Coordenadas> positions;

        if (aux == null) {
            String cadena = jtfTextoToFind.getText();
            jlStatus.setText("No se encontraron resultados de: " + cadena);
        } else {
            //Obtain the line number
            for (Object object : aux) {
                Coordenadas coord = (Coordenadas) object;
                numLine.add(coord.getX());
            }

            HashSet<Integer> hashSet = new HashSet<Integer>(numLine);
            numLine.clear();
            numLine.addAll(hashSet);

            //Sort numLine
            Collections.sort(numLine);

            // Create a second structure that only have words where the word-to-search is present.
            Set set = tMap.entrySet();
            Iterator iterator = set.iterator();
            while (iterator.hasNext()) {
                positions = new ArrayList<Coordenadas>();
                Map.Entry mentry = (Map.Entry) iterator.next();
                ArrayList aux1 = (ArrayList) mentry.getValue();
                ArrayList exist;

                for (Object object : aux1) {
                    Coordenadas coords = (Coordenadas) object;
                    Coordenadas cord = new Coordenadas();
                    if (numLine.contains(coords.getX())) {
                        if (tMap2.containsKey(mentry.getKey().toString())) {
                            exist = tMap2.get(mentry.getKey().toString());
                            cord.x = coords.getX();
                            cord.y = coords.getY();
                            exist.add(cord);
                            tMap2.put(mentry.getKey().toString(), exist);
                        } else {
                            cord.x = coords.getX();
                            cord.y = coords.getY();
                            positions.add(cord);
                            tMap2.put(mentry.getKey().toString(), positions);
                        }
                    }
                    exist = null;
                    cord = null;
                }
                positions = null;
            }

            for (Integer intNum : numLine) {
                Set set2 = tMap2.entrySet();
                Iterator iterator2 = set2.iterator();
                tMapLine = new TreeMap<Integer, String>();

                while (iterator2.hasNext()) {
                    Map.Entry mentry = (Map.Entry) iterator2.next();
                    ArrayList aux1 = (ArrayList) mentry.getValue();

                    for (Object object : aux1) {
                        Coordenadas coords = (Coordenadas) object;
                        int x = coords.getX();
                        if (x == intNum && !tMapLine.containsKey(coords.getY())) {
                            tMapLine.put(coords.getY(), mentry.getKey().toString());
                        }
                    }
                }

                jtaText.append("\r\n" + intNum + ".-  " + printLines(tMapLine));
                //highLightText(jtaText, jtfTextoToFind.getText());
                tMapLine = null;
                set2 = null;
                iterator2 = null;
            }
            jlStatus.setText(aux.size() + " resultado(s) encontrado(s)...");
            jrbHighLigthText.setEnabled(true);
        }

    }

    public static void showStructure(TreeMap tMap) {
        /* Display content using Iterator*/
        Set set = tMap.entrySet();
        Iterator iterator = set.iterator();
        while (iterator.hasNext()) {
            Map.Entry mentry = (Map.Entry) iterator.next();
            System.out.print("Palabra: " + mentry.getKey() + " ");
            ArrayList aux = (ArrayList) mentry.getValue();
            for (Object object : aux) {
                Coordenadas coor = (Coordenadas) object;
                int x = coor.getX();
                int y = coor.getY();
                System.out.println(x + "," + y);
            }
        }
    }

    public static String printLines(Map map) {
        // Get a set of the entries on the sorted map
        Set set = map.entrySet();

        // Get an iterator
        Iterator i = set.iterator();

        // Display elements
        String text = "";
        while (i.hasNext()) {
            Map.Entry me = (Map.Entry) i.next();
            text += me.getValue().toString() + " ";
        }
        return text;
    }

    public class BackgroundWorker extends SwingWorker<Void, Void> {

        public BackgroundWorker() {
            addPropertyChangeListener(new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    jlStatus.setText("Cargando archivo " + getProgress() + " %...");
                    if (getProgress() == 100) {
                        jlStatus.setText("Ingrese el texto a buscar...");
                    }
                }

            });
        }

        @Override
        protected void done() {
            enableComponents();

        }

        @Override
        protected Void doInBackground() throws Exception {

            FileInputStream inputStream = null;
            Scanner sc = null;

            File fichero = new File(path);
            long fileSize = fichero.length();

            float totalDataRead = 0;
            
            
            jlStatus.setText("Calculando tama√±o de archivo...");
            totalLines = Files.readAllLines(Paths.get(path)).size();
           

            int percent = 0;
            try {
                inputStream = new FileInputStream(path);
                sc = new Scanner(inputStream, "UTF-8");
                int numLine = 1;
                while (sc.hasNextLine()) {
                    percent = (int) ((numLine * 100) / totalLines);
                    setProgress(percent);
                    HashMap aux = new HashMap();
                    String line = sc.nextLine();
                    aux = getPositionWords(line);
                    tMap = createStructure(numLine, line, aux, tMap);
                    numLine++;
                }

                if (sc.ioException() != null) {
                    throw sc.ioException();
                }
            } finally {
                if (inputStream != null) {
                    inputStream.close();
                }
                if (sc != null) {
                    sc.close();
                }
            }
            return null;
        }

    }

    public class BackgroundWorker2 extends SwingWorker<Void, Void> {

        public BackgroundWorker2() {
            addPropertyChangeListener(new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                }

            });
        }

        @Override
        protected void done() {
            jbDelete.setEnabled(true);
        }

        @Override
        protected Void doInBackground() throws Exception {
            jtaText.setText("");
            jlStatus.setText("Analizando archivo...");
            jrbHighLigthText.setSelected(false);
            reconstructWord(jtfTextoToFind.getText(), tMap);
            return null;
        }

    }

        public void init() {
            jlStatus.setText("Bienvenido al analizador de Logs...Favor de cargar el archivo");
            this.setLocationRelativeTo(null);
            this.setResizable(false);
            this.setTitle("Analizador de logs");
            jbLoadFile.setEnabled(true);
            jbDelete.setEnabled(false);
            jtfTextoToFind.setEnabled(false);
            jbSearch.setEnabled(false);
            jrbHighLigthText.setEnabled(false);
            jtaText.setEnabled(false);
            jtaText.setEditable(false);
        }

        public void enableComponents() {
            jbLoadFile.setEnabled(false);
            jtfTextoToFind.setEnabled(true);
            jbSearch.setEnabled(true);
            jrbHighLigthText.setEnabled(false);
            jtaText.setEnabled(true);
        }

        public static void highLightText(JTextComponent textComp, String pattern) {
            removeHighLightText(textComp);
            try {

                Highlighter hlt = textComp.getHighlighter();
                Document doc = textComp.getDocument();
                String text = doc.getText(0, doc.getLength());
                int pos = 0;
                while ((pos = text.toUpperCase().indexOf(pattern.toUpperCase(), pos)) >= 0) {
                    hlt.addHighlight(pos, pos + pattern.length(), hlter);
                    pos += pattern.length();
                }

            } catch (Exception e) {

            }
        }

        public static void removeHighLightText(JTextComponent textComp) {
            Highlighter hlt = textComp.getHighlighter();
            Highlighter.Highlight[] hilites = hlt.getHighlights();

            for (int i = 0; i < hilites.length; i++) {

                if (hilites[i].getPainter() instanceof HighLighterText) {
                    hlt.removeHighlight(hilites[i]);
                }
            }
        }

    }
